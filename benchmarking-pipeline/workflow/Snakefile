import gzip
configfile: 'config/config.yaml'


CALLSETS = config['callsets']
READS = config['reads']
PANGENIE = config['pangenie']
PANGENIE_MODULES = config['pangenie-modules']
DOWNSAMPLING = config['downsampling']

PANEL_SAMPLES = {}
for callset in CALLSETS.keys():
	for line in gzip.open(CALLSETS[callset]['multi'], 'rt'):
		if line.startswith("#CHROM"):
			PANEL_SAMPLES[callset] = line.strip().split()[9:]
			break



include: 'rules/leave-one-out.smk'
include: 'rules/population-typing.smk'
include: 'rules/population-evaluation.smk'

coverages = ['full'] + config['downsampling']
versions_to_run = [v for v in config['pangenie'].keys()] + [v for v in config['pangenie-modules'].keys()]


def leave_one_out_plots(wildcards):
	plots = []
	for callset in CALLSETS.keys():
		plots.extend( expand("{results}/leave-one-out/{callset}/plots/comparison-versions/{metric}/{metric}_{coverage}_{regions}.pdf", results=RESULTS_BENCH, callset=callset, metric=['concordance', 'precision-recall-typable', 'untyped', 'concordance-vs-untyped'], coverage=coverages, regions=['biallelic', 'multiallelic'] + [r for r in CALLSETS[callset]["regions"].keys()]))
		plots.extend( expand("{results}/leave-one-out/{callset}/plots/comparison-coverages/{metric}/{metric}_{version}_{regions}.pdf", results=RESULTS_BENCH, callset=callset, metric=['concordance', 'precision-recall-typable', 'untyped'], version = versions_to_run, regions = ['biallelic', 'multiallelic'] + [r for r in CALLSETS[callset]["regions"].keys()]))
	return plots




rule all:
	input:
		leave_one_out_plots,
		expand("{results}/leave-one-out/{callset}/plots/resources/resources_{callset}-{coverage}.pdf", results = config['results'], callset = [c for c in config['callsets'].keys()], coverage = coverages),

		expand("{results}/population-typing/{callset}/{version}/{coverage}/merged-vcfs/whole-genome/all-samples_{what}_all.vcf.gz", results = config['results'], callset = [c for c in config['callsets'].keys()], what = ['bi'], version = versions_to_run, coverage = coverages),
		expand("{results}/population-typing/{callset}/sample-index.tsv", results = config['results'], callset = [c for c in config['callsets'].keys()]),
		expand("{results}/population-typing/{callset}/{version}/{coverage}/evaluation/statistics/plot_bi_all_filters.tsv", results = config['results'], callset = [c for c in config['callsets'].keys()], version = versions_to_run, coverage = ['full']),
		expand("{results}/population-typing/{callset}/{version}/{coverage}/merged-vcfs/filtered/all-samples_bi_all_lenient.vcf.gz", results = config['results'], callset = [c for c in config['callsets'].keys()], version = versions_to_run, coverage = ['full'])

rule leave_one_out:
	input:
		leave_one_out_plots,
		expand("{results}/leave-one-out/{callset}/plots/resources/resources_{callset}-{coverage}.pdf", results = config['results'], callset = [c for c in config['callsets'].keys()], coverage = coverages),


rule population_typing:
	input:
		expand("{results}/population-typing/{callset}/{version}/{coverage}/merged-vcfs/whole-genome/all-samples_{what}_all.vcf.gz", results = config['results'], callset = [c for c in config['callsets'].keys()], what = ['bi'], version = versions_to_run, coverage = coverages),
		expand("{results}/population-typing/{callset}/sample-index.tsv", results = config['results'], callset = [c for c in config['callsets'].keys()]),
		expand("{results}/population-typing/{callset}/{version}/{coverage}/evaluation/statistics/plot_bi_all_filters.tsv", results = config['results'], callset = [c for c in config['callsets'].keys()], version = versions_to_run, coverage = ['full']),
		expand("{results}/population-typing/{callset}/{version}/{coverage}/merged-vcfs/filtered/all-samples_bi_all_lenient.vcf.gz", results = config['results'], callset = [c for c in config['callsets'].keys()], version = versions_to_run, coverage = ['full'])
